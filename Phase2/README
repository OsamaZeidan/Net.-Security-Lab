ENCS5121 - Phase 2 Project
AES-Encrypted Guessing Game (Client-Server over TCP)

----------------------------------------
Overview
----------------------------------------

This project implements a secure client-server number guessing game using AES-256 encryption in CBC mode, as required by Phase 2 of the ENCS5121 course. All communication between the client and server is encrypted using a symmetric AES key derived from the student's ID (1210601). 

The guessing game runs over a TCP connection, and each message is encrypted before being sent and decrypted upon receipt. A new Initialization Vector (IV) is securely generated for each message.

This implementation was built from scratch, excluding optional features, and follows all the constraints and guidelines given in the official instructions.

----------------------------------------
How It Works
----------------------------------------

1. The client connects to the server via TCP.
2. The server sends a menu (Start Game / Exit), encrypted with AES-256-CBC.
3. The client decrypts the menu, selects an option, and sends the encrypted response.
4. If the user starts a new game, the server selects a random number between 1 and 100.
5. The client guesses the number, and all guesses/responses are encrypted.
6. The game continues until the client guesses the correct number.
7. The menu is shown again, and the user can play more rounds or exit.

----------------------------------------
Encryption Details
----------------------------------------

- **Algorithm**: AES (Advanced Encryption Standard)
- **Mode**: CBC (Cipher Block Chaining)
- **Key**: 256-bit key generated by hashing the student ID with SHA-256
- **IV (Initialization Vector)**: Random 16-byte value generated for every message using a secure random number generator
- **Padding**: Manual PKCS#7-style padding is applied and removed for AES compatibility

All encrypted messages follow this format:
    [IV (16 bytes)] + [Encrypted Ciphertext]

----------------------------------------
Requirements
----------------------------------------

- Python 3.8 or newer
- PyCryptodome library (to install: run `pip install pycryptodome`)

----------------------------------------
Running the Project
----------------------------------------

1. Open two terminals (or use two virtual machines).
2. In the first terminal, run the server:
       python3 server.py

3. In the second terminal, run the client:
       python3 client.py

4. Enter the server's IP address when prompted. If running on the same machine, use:
       127.0.0.1

5. Follow the menu prompts in the client window to play the game.

----------------------------------------
How to Verify Encryption
----------------------------------------

You can validate the encryption process using the online tool Cryptii:

1. Go to: https://cyberchef.io/
2. Enter your plaintext message.
3. Set the mode to AES, key size to 256-bit, and block mode to CBC.
4. Paste your SHA256 hash of your student ID as the encryption key.
5. Paste the IV (from your encrypted message) in the IV field.
6. Compare the ciphertext — it should match what your client or server produced.


----------------------------------------
Author
----------------------------------------

Name: Osama Zeidan
Student ID: 1210601
Course: ENCS5121 – Information Security and Computer Networks Lab
Phase: Project Phase 2

----------------------------------------
